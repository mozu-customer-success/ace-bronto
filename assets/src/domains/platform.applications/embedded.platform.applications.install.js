/*
 * This custom function was generated by the Actions Generator
 * in order to enable the other custom functions in this app
 * upon installation into a tenant.
 */

let ActionInstaller = require('mozu-action-helpers/installers/actions')
let constants = require('mozu-node-sdk/constants')
let length = require('ramda/src/length')
let findIndex = require('ramda/src/findIndex')

module.exports = function (context, callback) {
  let self = this
  let tenant = context.get.tenant()

  try {
    addCustomRoutes(context, tenant)
      .then(callback.bind(null, undefined))
      .catch(callback)
  } catch (e) {
    console.log(e)
    callback()
  }


  function addCustomRoutes(context, tenant) {
    let tasks = tenant.sites.map(function (site) {
      let customRoutesApi = require('mozu-node-sdk/clients/commerce/settings/general/customRouteSettings')()
      customRoutesApi.context[constants.headers.SITE] = site.id
      return customRoutesApi.getCustomRouteSettings().then(
        function (customRoutes) {
          return appUpdateCustomRoutes(customRoutesApi, customRoutes)
        },
        function (err) {
          console.log('custom routes get error', err)
          return appUpdateCustomRoutes(customRoutesApi, {
            routes: []
          })
        }
      )
    })


    return Promise.all(tasks.map(p => p.catch(e => e))).then(
      function (result) {
        return enableActions(context)
      }
    )
  }

  function appUpdateCustomRoutes(customRoutesApi, customRoutes) {
    console.log(customRoutes)
    console.log('route array size', length(customRoutes.routes))
    customRoutes = getRoutes(customRoutes, 'bronto/saveContact', 'saveContact')
    customRoutes = getRoutes(customRoutes, 'bronto/readLists', 'readLists')
    return customRoutesApi.updateCustomRouteSettings(customRoutes)
  }


  function enableActions(context) {
    console.log('installing code actions')
    let installer = new ActionInstaller({
      context: context.apiContext
    })
    return installer
      .enableActions(context, null, {
        saveContact: function (settings) {
          settings = settings || {}
          settings.timeoutMilliseconds = settings.timeoutMilliseconds || 5000
          settings.configuration = settings.configuration || {
            url: 'https://api.bronto.com/v4',
            recaptchaSecret: '6Lc-qyQUAAAAALcw6Omw22ZipUO_IsmUbLf_KN2D',
            listId: "0bc503ec00000000000000000000001ef8f4",
            listMap: [{
                "id": "981a5420-e7f9-4fc2-b306-307bd24e13e3",
                "name": "Bronto Created: non engaged contacts",
                "label": "Bronto Created: non engaged contacts",
                "activeCount": "5096",
                "status": "active"
              },
              {
                "id": "0f2ef8ba-ed17-4c3d-a128-42f87818f93a",
                "name": "SUPRESSED CONTACTS - ACE REWARDS",
                "label": "SUPRESSED CONTACTS - ACE REWARDS",
                "activeCount": "1",
                "status": "active"
              },
              {
                "id": "eaf9563d-eeea-4e01-9a76-2d8ad08ed018",
                "name": "Cart Recovery Test",
                "label": "Cart Recovery Test",
                "activeCount": "1",
                "status": "active"
              },
              {
                "id": "0bc503ec00000000000000000000001ef8f4",
                "name": "Test Emails",
                "label": "Test Emails",
                "activeCount": "58",
                "status": "active"
              },
              {
                "id": "0bc503ec00000000000000000000001f8c29",
                "name": "Ace Created: Master List",
                "label": "Ace Created: Master List",
                "activeCount": "582856",
                "status": "active"
              }
            ]
          }
          return settings
        },
        readLists: function (settings) {
          settings = settings || {}
          settings.timeoutMilliseconds = settings.timeoutMilliseconds || 5000
          settings.configuration = settings.configuration || {
            url: 'https://api.bronto.com/v4',
            key: 'replace this key'
          }
          return settings
        }
      })
  }





  function getRoutes(customRoutes, template, action) {
    let route = {
      template: template,
      internalRoute: 'Arcjs',
      functionId: action,
    }

    let index = findIndex(function (route) {
      return route.functionId == action
    }, customRoutes.routes)
    console.log('Action index ' + action, index)
    if (index <= -1) customRoutes.routes[length(customRoutes.routes)] = route
    else customRoutes.routes[index] = route

    return customRoutes
  }
}
